(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'swarm-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"/Users/benjaminyu/swarm/src/js/states/boot.js","./states/game":"/Users/benjaminyu/swarm/src/js/states/game.js","./states/menu":"/Users/benjaminyu/swarm/src/js/states/menu.js","./states/preloader":"/Users/benjaminyu/swarm/src/js/states/preloader.js","./states/splash":"/Users/benjaminyu/swarm/src/js/states/splash.js","./utils":"/Users/benjaminyu/swarm/src/js/utils.js"}],"/Users/benjaminyu/swarm/src/js/entities/enemy.js":[function(require,module,exports){
var Enemy = function (index, game, player, bmd) {
    var x = game.world.randomX;
    var y = game.world.randomY;

    this.game = game;
    this.health = 3;
    this.player = player;
    this.alive = true;

    this.sprite = game.add.sprite(x, y, bmd);
    this.sprite.anchor.set(0.5);

    this.sprite.name = index.toString();
    game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.immovable = false;
    this.sprite.body.collideWorldBounds = true;
    this.sprite.body.bounce.setTo(1, 1);

    this.sprite.angle = game.rnd.angle();

    game.physics.arcade.velocityFromRotation(this.sprite.rotation, 150, this.sprite.body.velocity);
}

Enemy.prototype = Object.create(Phaser.Sprite.prototype);
Enemy.prototype.constructor = Enemy;


Enemy.prototype.update = function(enemies) {
    var neighbourCount = 0;
    // Alignment
    var alignVel = new Phaser.Point();
    var cohesionVel = new Phaser.Point();
    var seperationVel = new Phaser.Point();
    alignVel.copyFrom(this.sprite.body.velocity);
    if (enemies) {
        for (var i = enemies.length - 1; i >= 0; i--) {
            if(enemies[i] != this && this.game.physics.arcade.distanceBetween(this.sprite.body, enemies[i].sprite.body) < 150) {
                // Average Velocity of Group
                alignVel.add(enemies[i].sprite.body.velocity.x,enemies[i].sprite.body.velocity.y);
                // Center of Mass of Group
                cohesionVel.add(enemies[i].sprite.body.position.x,enemies[i].sprite.body.position.y)
                seperationVel.add(enemies[i].sprite.body.position.x-this.sprite.body.position.x,enemies[i].sprite.body.position.y-this.sprite.body.position.y)
                neighbourCount += 1;
            }
        };
        if (neighbourCount > 0) {
            alignVel = Phaser.Point.normalize(alignVel);
            alignVel.multiply(150,150);
            cohesionVel.multiply(1/neighbourCount,1/neighbourCount);
            cohesionVel.set(cohesionVel.x - this.sprite.body.position.x,cohesionVel.y - this.sprite.body.position.y);
            cohesionVel = Phaser.Point.normalize(cohesionVel);
            cohesionVel.multiply(150,150);
            seperationVel.multiply(1/neighbourCount,1/neighbourCount);
            seperationVel.multiply(-1,-1);
            seperationVel = Phaser.Point.normalize(seperationVel);
            seperationVel.multiply(150,150);
        }
        this.sprite.body.velocity.set(0.2*alignVel.x+0.2*cohesionVel.x+0.25*seperationVel.x,0.2*alignVel.y+0.2*cohesionVel.y+0.25*seperationVel.y);
        this.sprite.body.velocity = Phaser.Point.normalize(this.sprite.body.velocity);
        this.sprite.body.velocity.multiply(150,150);
    }
};

module.exports = Enemy;

},{}],"/Users/benjaminyu/swarm/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

module.exports = Player;

},{}],"/Users/benjaminyu/swarm/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/benjaminyu/swarm/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Enemy = require('../entities/enemy');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    // Create BitmapData
    this.enemy_bmd = this.game.add.bitmapData(100,100);

    // Draw circle
    this.enemy_bmd.ctx.fillStyle = '#000000';
    this.enemy_bmd.ctx.shadowColor = '#00ff00';
    this.enemy_bmd.ctx.shadowBlur = 40;
    this.enemy_bmd.ctx.shadowOffsetX = 0;
    this.enemy_bmd.ctx.shadowOffsetY = 0;
    this.enemy_bmd.ctx.beginPath();
    this.enemy_bmd.ctx.arc(50, 50, 10, 0, Math.PI*2, true); 
    this.enemy_bmd.ctx.closePath();
    this.enemy_bmd.ctx.fill();

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    //  Create some enemies
    this.enemies = [];

    this.enemiesTotal = 20;
    this.enemiesAlive = 20;

    for (var i = 0; i < this.enemiesTotal; i++)
    {
        this.enemies.push(new Enemy(i, this.game, this.testentity, this.enemy_bmd));
    }

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;

    for (var i = 0; i < this.enemies.length; i++) {
        if (this.enemies[i].alive)
        {
           this.enemies[i].update(this.enemies);
        }
    }

  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/enemy":"/Users/benjaminyu/swarm/src/js/entities/enemy.js","../entities/player":"/Users/benjaminyu/swarm/src/js/entities/player.js"}],"/Users/benjaminyu/swarm/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"/Users/benjaminyu/swarm/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"/Users/benjaminyu/swarm/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/benjaminyu/swarm/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
